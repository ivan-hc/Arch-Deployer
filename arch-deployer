#!/usr/bin/env bash

AD_VERSION="1.7.0"

export ARCH=$(uname -m)
MIRROR="https://archlinux.org/packages"

# XDG Variables
SCRIPTDIR="${SCRIPTDIR:-$(xdg-user-dir DESKTOP 2>/dev/null)}"
[ -d "$SCRIPTDIR" ] || SCRIPTDIR="$PWD"

# Dividing line
_DIVIDING_LINE() {
	printf "\n############################################################################\n\n"
}

# Fit texts to an acceptable width
_fit() {
	command -v tput >/dev/null 2>&1 && fold -sw "$(("$(tput cols)"-"3"))" | sed 's/^/ /g' || fold -sw 77 | sed 's/^/ /g'
}

# Function to check online connections (uses archlinux.org by default, as the core packages are stored/hosted there)
_online_check() {
	if ! wget -q --tries=10 --timeout=20 --spider https://archlinux.org/; then
		if command -v torsocks >/dev/null 2>&1; then
			if ! torsocks wget -q --tries=10 --timeout=20 --spider https://archlinux.org/; then
				printf "\n https://archlinux.org is offline, please check your internet connection and try again\n\n" | _fit
				exit 0
			else
				use_torsocks="torsocks"
			fi
		else
			printf "\n https://archlinux.org is offline, please check your internet connection and try again\n\n" | _fit
			exit 0
		fi
	fi
}

################################################################################################################################################################
#				HELP
################################################################################################################################################################

HELP_MESSAGE_HEADER="

        ╭━━━┳━━━┳━━━┳╮╱╭╮╭━━━┳━━━┳━━━┳╮╱╱╭━━━┳╮╱╱╭┳━━━┳━━━╮
        ┃╭━╮┃╭━╮┃╭━╮┃┃╱┃┃╰╮╭╮┃╭━━┫╭━╮┃┃╱╱┃╭━╮┃╰╮╭╯┃╭━━┫╭━╮┃
        ┃┃╱┃┃╰━╯┃┃╱╰┫╰━╯┃╱┃┃┃┃╰━━┫╰━╯┃┃╱╱┃┃╱┃┣╮╰╯╭┫╰━━┫╰━╯┃
        ┃╰━╯┃╭╮╭┫┃╱╭┫╭━╮┃╱┃┃┃┃╭━━┫╭━━┫┃╱╭┫┃╱┃┃╰╮╭╯┃╭━━┫╭╮╭╯
        ┃╭━╮┃┃┃╰┫╰━╯┃┃╱┃┃╭╯╰╯┃╰━━┫┃╱╱┃╰━╯┃╰━╯┃╱┃┃╱┃╰━━┫┃┃╰╮
        ╰╯╱╰┻╯╰━┻━━━┻╯╱╰╯╰━━━┻━━━┻╯╱╱╰━━━┻━━━╯╱╰╯╱╰━━━┻╯╰━╯"
HELP_MESSAGE="$(_DIVIDING_LINE)

A script to bulk download an arch linux package with all its dependencies to be converted in appimage. add the name of a program from the arch linux repositories and chaotic-aur.
 
USAGE:
	arch-deployer \$PROGRAM (download a program)

	arch-deployer -v (show the version)

	arch-deployer -h (show this message)

All packages are taken from https://archlinux.org/packages, AUR packages are taken from \"chaotic-aur\" instead, at https://builds.garudalinux.org/repos/chaotic-aur
$(_DIVIDING_LINE)

SITE:

	https://github.com/ivan-hc/arch-deployer

SEE ALSO:

	https://github.com/ivan-hc/ArchImage

	https://github.com/ivan-hc/AM 
"

################################################################################################################################################################
#				CORE APPIMAGE UTILITIES
################################################################################################################################################################

_appimagetool() {
	if ! command -v appimagetool 1>/dev/null; then
		[ ! -f ./appimagetool ] && echo " Downloading appimagetool..." && curl -#Lo appimagetool https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-"$ARCH".AppImage && chmod a+x ./appimagetool
		./appimagetool "$@"
	else
		appimagetool "$@"
	fi
}

_create_apprun() {
	rm -f AppRun
	cat <<-'HEREDOC' >> AppRun
	#!/bin/sh

	HERE="$(dirname "$(readlink -f "${0}")")"

	export PATH="${HERE}"/usr/bin/:"${HERE}"/usr/sbin/:"${HERE}"/usr/games/:"${HERE}"/bin/:"${HERE}"/sbin/:"${PATH}"

	lib_dirs=$(find "$HERE"/usr/lib -type d | sed 's#usr/lib/#DEL\n#g' | grep -v DEL$)
	for d in $lib_dirs; do
		export LD_LIBRARY_PATH="${HERE}"/usr/lib/"$d"/:"${LD_LIBRARY_PATH}"
	done

	export LD_LIBRARY_PATH="${HERE}"/usr/lib/:"${HERE}"/usr/lib64/:"${HERE}"/usr/lib32/:"${HERE}"/lib64/:"${HERE}"/lib32/:"${HERE}"/lib/:"${LD_LIBRARY_PATH}"

	export XDG_DATA_DIRS="${HERE}"/usr/share/:"${XDG_DATA_DIRS}"

	if test -d "${HERE}"/usr/lib/python*; then
		PYTHONVERSION=$(find "${HERE}"/usr/lib -type d -name "python*" | head -1 | sed 's:.*/::')
		export PYTHONPATH="${HERE}"/usr/lib/"$PYTHONVERSION"/site-packages/:"${HERE}"/usr/lib/"$PYTHONVERSION"/lib-dynload/:"${PYTHONPATH}"
		export PYTHONHOME="${HERE}"/usr/
	fi

	export PERLLIB="${HERE}"/usr/share/perl5/:"${HERE}"/usr/lib/perl5/:"${PERLLIB}"

	export GSETTINGS_SCHEMA_DIR="${HERE}"/usr/share/glib-2.0/schemas/:"${GSETTINGS_SCHEMA_DIR}"

	QTVER=$(find "${HERE}"/usr/lib -type d -name "qt*" | head -1 | sed 's:.*/::')
	if [ -z "$QTVER" ]; then
		export QT_PLUGIN_PATH="${HERE}"/usr/lib/"$QTVER"/plugins/:"${HERE}"/usr/lib/x86_64-linux-gnu/"$QTVER"/plugins/:"${HERE}"/usr/lib64/"$QTVER"/plugins/:"${HERE}"/lib/"$QTVER"/plugins/:"${HERE}"/lib64/"$QTVER"/plugins/:"${QT_PLUGIN_PATH}"
	fi

	APP=SAMPLE
	if [ -f "${HERE}"/usr/lib/"$APP"/"$APP" ]; then
		exec "${HERE}"/usr/lib/"$APP"/"$APP" "$@"
	elif [ -f "${HERE}"/usr/bin/"$APP" ]; then
		exec "${HERE}"/usr/bin/"$APP" "$@"
	else
		echo "No binary found in \$PATH"
	fi
	HEREDOC
	chmod a+x AppRun
	sed -i "s/SAMPLE/$BIN/g" AppRun
}

_download_and_extract_dependencies() {
	ARGS=$(cat ./DEP)
	for pkg in ${ARGS} ; do
		for REPO in core extra community multilib; do
			$use_torsocks wget -q --no-verbose --show-progress --progress=bar "${MIRROR}/${REPO}/${ARCH}/$pkg/download" --trust-server-names
		done
		if ! test -f "$pkg"-*.tar.zst; then
			[ -z "$CHAOTICAUR" ] && CHAOTICAUR=$(curl -Ls "https://builds.garudalinux.org/repos/chaotic-aur/${ARCH}" | tr '">< ' '\n' | grep "tar.zst$" | uniq)
			chaotic_pkg=$(echo "$CHAOTICAUR" | grep "^$pkg-[0-9].*.tar.zst$" 2>/dev/null | head -1)
			[ -n "$chaotic_pkg" ] && wget -q --no-verbose --show-progress --progress=bar "https://cf-builds.garudalinux.org/repos/chaotic-aur/${ARCH}/$chaotic_pkg"
			unset chaotic_pkg
		fi
	done
	for f in *.tar.zst; do 
		tar xf "$f" 2>/dev/null
	done
	mkdir -p ./"$APP".AppDir
	_DIVIDING_LINE
	dirs="bin boot dev etc lib lib64 libx32 lib32 media mnt opt proc run sbin srv sys tmp usr var"
	for d in $dirs; do
		[ -d ./"$d" ] && rsync -av ./"$d" ./"$APP".AppDir/ 2>/dev/null | echo "◆ Rsync /$d content to $APP.AppDir"
	done
	_DIVIDING_LINE
}

################################################################################################################################################################
#				USAGE
################################################################################################################################################################

case "$1" in
	'help'|'-h')
		echo "$HELP_MESSAGE_HEADER"
		echo "$HELP_MESSAGE" | _fit
		;;
	'version'|'-v'|'--version')
		echo "$AD_VERSION"
		;;
	'')
		printf "\nPlease add the name of a program from the arch linux repositories\n\nUSAGE:     arch-deployer \$PROGRAM\n\n" | _fit
		;;
	*)
		APP="$1"

		_online_check

		# Name the executable in /usr/bin if different from the appname
		read -r -ep "◆ Name the main executable in \$PATH, or leave blank if it is the same: " BIN
    		[ -z "$BIN" ] && BIN="$APP"

		if [ -d ./"$APP"/"$APP".AppDir ]; then
			_DIVIDING_LINE
			echo " The $APP.AppDir directory already exists!"
			sleep 2
		else
			# DOWNLOADING THE APPLICATION
			mkdir -p ./"$APP" && cd ./"$APP" || exit 1
			for REPO in core extra community multilib; do
				$use_torsocks wget -q --no-verbose --show-progress --progress=bar "${MIRROR}/${REPO}/${ARCH}/$APP/download" --trust-server-names
			done
			if ! test -f "$APP"-*.tar.zst; then
				CHAOTICAUR=$(curl -Ls "https://builds.garudalinux.org/repos/chaotic-aur/${ARCH}" | tr '">< ' '\n' | grep "tar.zst$" | uniq)
				chaotic_pkg=$(echo "$CHAOTICAUR" | grep "^$APP-[0-9].*.tar.zst$" 2>/dev/null | head -1)
				wget -q --no-verbose --show-progress --progress=bar "https://cf-builds.garudalinux.org/repos/chaotic-aur/${ARCH}/$chaotic_pkg"
				unset chaotic_pkg
			fi
			if ! test -f "$APP"-*.tar.zst; then
				printf " 💀 ERROR: no main package found for %b. Exiting.\n" "$APP" && exit 0
			else
				tar xf ./*.tar.zst
			fi

			# READ AND/OR EDIT THE DEPENDENCIES LIST
			DEP=$(cat ./.PKGINFO | grep "^depend = " | sed 's/depend = //g' | sed 's/=.*//')
			VERSION=$(cat ./.PKGINFO | grep pkgver | cut -c 10- | sed 's@.*:@@')
			echo "$DEP" | tr ' ' '\n' | sort >> DEP
			printf "\n"
			cat DEP
			_DIVIDING_LINE
			while true; do
				read -r -p " Do you wish to add other packages to the list (y/N)?" response
				if echo "$response" | grep -qi "^y"; then
					read -r -ep " Please enter the package names: " packages
					if [ -n "$packages" ]; then
						echo "$packages" | tr ' ' '\n' >> DEP
						sort DEP > DEP.new && mv DEP.new DEP
					fi
					printf "\n THE FOLLOWING PACKAGES WILL BE DOWNLOADED:\n\n%b\n\n" "$(cat DEP)"
					unset packages
					break
				else
					printf "\n OK, LET'S GO! \n\n"
					break
				fi
			done

			# DOWNLOAD AND EXTRACT THE DEPENDENCIES TO THE APPDIR
			_download_and_extract_dependencies

			# CREATING THE APPRUN SCRIPT
			_create_apprun
			mv ./AppRun ./"$APP".AppDir/

			# TRY TO COPY ICON AND LAUNCHER INTO THE APPDIR
			LAUNCHER=$(grep -iRl "$BIN" ./"$APP".AppDir/usr/share/applications/* | grep ".desktop" | head -1)
			APPNAME=$(cat "$LAUNCHER" | grep 'Name=' | head -1 | cut -c 6- | sed 's/ /-/g')
			cp -r "$LAUNCHER" "$APP".AppDir/
			ICON=$(cat "$LAUNCHER" | grep "Icon=" | cut -c 6-)
			[ -z "$ICON" ] && ICON="$BIN"
			cp -r ./"$APP".AppDir/usr/share/icons/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/22x22/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/24x24/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/32x32/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/48x48/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/64x64/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/128x128/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/192x192/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/256x256/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/512x512/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/icons/hicolor/scalable/apps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			cp -r ./"$APP".AppDir/usr/share/pixmaps/*"$ICON"* "$APP".AppDir/ 2>/dev/null
			if [ ! -f "$ICON".png ] || [ ! -f "$ICON".svg ]; then
				touch "$APP".AppDir/"$ICON".png
			fi
			cd ..
			echo " The $APP.AppDir is ready!"
			echo " You may check it for issues to fix before you export it to an AppImage."
			sleep 2
			_DIVIDING_LINE
		fi
	sleep 1

	# CHECK THE APPDIR (QUESTION)
	while true; do
		read -r -p  " Do you wish to check the $APP.AppDir first (y/N)?" response
		if echo "$response" | grep -qi "^y"; then
			_DIVIDING_LINE
			echo " Opening the $APP.AppDir directory!"
			sleep 1
			printf "\n Exec the AppRun (command './AppRun') to test if everything works! \n"
			sleep 1
			xdg-open ./"$APP"/"$APP".AppDir
			printf "\n"
			break
		else
			break
		fi
	done

	# FINAL STEPS
	while true; do
		# DOWNLOAD OTHER PACKAGES (IF NEEDED)
		while true; do
			read -r -p " Do you wish to add other packages to the list (y/N)?" response
			if echo "$response" | grep -qi "^y"; then
				cd ./"$APP" || exit 1
				read -r -ep " Please enter the package names: " packages
				if [ -n "$packages" ]; then
					echo "$packages" | tr ' ' '\n' > DEP
					printf "\n THE FOLLOWING NEW PACKAGES WILL BE DOWNLOADED:\n\n%b\n\n" "$(cat DEP)"
					unset packages
					_download_and_extract_dependencies
				fi
				cd ..
				break
			else
				printf "\n OK, LET'S GO! \n\n"
				break
			fi
		done

		# EXPORT THE APPDIR TO AN APPIMAGE
		while true; do
			read -r -p  " Do you wish to export $APP.AppDir to an AppImage (Y/n)?" response
			if ! echo "$response" | grep -qi "^n"; then
				printf "\n"
				_appimagetool -n ./"$APP"/"$APP".AppDir 2>/dev/null
				mv ./*.AppImage "$SCRIPTDIR"/"$APPNAME"_"$VERSION"-archdelpoyer"$AD_VERSION"-"$ARCH".AppImage 2>/dev/null
				_DIVIDING_LINE
				printf " %b has been exported to %b! \n\n Repeat this operation in case the AppImage doesn't work:\n" "$APP" "$DATADIR"
				_DIVIDING_LINE
				break
			else
				THE_END="1"
				break
			fi
		done
		[ -n "$THE_END" ] && break
	done
	_DIVIDING_LINE
	printf " THANK YOU FOR USING ARCH-DEPLOYER! \n\n Please consider submitting your application to \"AM\"\n\n SITE: https://github.com/ivan-hc/AM\n\n"
	echo "############################################################################"
	exit 0
esac
